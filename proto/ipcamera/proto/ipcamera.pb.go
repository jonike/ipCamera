// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/ipcamera.proto

package ipcamera

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26a19172e10d89f2, []int{0}
}

func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type StreamResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26a19172e10d89f2, []int{1}
}

func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResponse.Unmarshal(m, b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return xxx_messageInfo_StreamResponse.Size(m)
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type StreamImageRequest struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamImageRequest) Reset()         { *m = StreamImageRequest{} }
func (m *StreamImageRequest) String() string { return proto.CompactTextString(m) }
func (*StreamImageRequest) ProtoMessage()    {}
func (*StreamImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26a19172e10d89f2, []int{2}
}

func (m *StreamImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamImageRequest.Unmarshal(m, b)
}
func (m *StreamImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamImageRequest.Marshal(b, m, deterministic)
}
func (m *StreamImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamImageRequest.Merge(m, src)
}
func (m *StreamImageRequest) XXX_Size() int {
	return xxx_messageInfo_StreamImageRequest.Size(m)
}
func (m *StreamImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamImageRequest proto.InternalMessageInfo

func (m *StreamImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type StreamImageResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamImageResponse) Reset()         { *m = StreamImageResponse{} }
func (m *StreamImageResponse) String() string { return proto.CompactTextString(m) }
func (*StreamImageResponse) ProtoMessage()    {}
func (*StreamImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26a19172e10d89f2, []int{3}
}

func (m *StreamImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamImageResponse.Unmarshal(m, b)
}
func (m *StreamImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamImageResponse.Marshal(b, m, deterministic)
}
func (m *StreamImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamImageResponse.Merge(m, src)
}
func (m *StreamImageResponse) XXX_Size() int {
	return xxx_messageInfo_StreamImageResponse.Size(m)
}
func (m *StreamImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamImageResponse proto.InternalMessageInfo

func (m *StreamImageResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type StreamVideoRequest struct {
	Video                []byte   `protobuf:"bytes,1,opt,name=video,proto3" json:"video,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamVideoRequest) Reset()         { *m = StreamVideoRequest{} }
func (m *StreamVideoRequest) String() string { return proto.CompactTextString(m) }
func (*StreamVideoRequest) ProtoMessage()    {}
func (*StreamVideoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26a19172e10d89f2, []int{4}
}

func (m *StreamVideoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamVideoRequest.Unmarshal(m, b)
}
func (m *StreamVideoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamVideoRequest.Marshal(b, m, deterministic)
}
func (m *StreamVideoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamVideoRequest.Merge(m, src)
}
func (m *StreamVideoRequest) XXX_Size() int {
	return xxx_messageInfo_StreamVideoRequest.Size(m)
}
func (m *StreamVideoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamVideoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamVideoRequest proto.InternalMessageInfo

func (m *StreamVideoRequest) GetVideo() []byte {
	if m != nil {
		return m.Video
	}
	return nil
}

type StreamVideoResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamVideoResponse) Reset()         { *m = StreamVideoResponse{} }
func (m *StreamVideoResponse) String() string { return proto.CompactTextString(m) }
func (*StreamVideoResponse) ProtoMessage()    {}
func (*StreamVideoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26a19172e10d89f2, []int{5}
}

func (m *StreamVideoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamVideoResponse.Unmarshal(m, b)
}
func (m *StreamVideoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamVideoResponse.Marshal(b, m, deterministic)
}
func (m *StreamVideoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamVideoResponse.Merge(m, src)
}
func (m *StreamVideoResponse) XXX_Size() int {
	return xxx_messageInfo_StreamVideoResponse.Size(m)
}
func (m *StreamVideoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamVideoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamVideoResponse proto.InternalMessageInfo

func (m *StreamVideoResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamRequest)(nil), "StreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "StreamResponse")
	proto.RegisterType((*StreamImageRequest)(nil), "StreamImageRequest")
	proto.RegisterType((*StreamImageResponse)(nil), "StreamImageResponse")
	proto.RegisterType((*StreamVideoRequest)(nil), "StreamVideoRequest")
	proto.RegisterType((*StreamVideoResponse)(nil), "StreamVideoResponse")
}

func init() { proto.RegisterFile("proto/ipcamera.proto", fileDescriptor_26a19172e10d89f2) }

var fileDescriptor_26a19172e10d89f2 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x2c, 0x48, 0x4e, 0xcc, 0x4d, 0x2d, 0x4a, 0xd4, 0x03, 0x73, 0x95, 0x94, 0xb9,
	0x78, 0x83, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84,
	0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25,
	0x1d, 0x2e, 0x3e, 0x98, 0xa2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x29, 0x2e, 0x8e, 0x22,
	0x28, 0x1b, 0xaa, 0x12, 0xce, 0x57, 0xd2, 0xe2, 0x12, 0x82, 0xa8, 0xf6, 0xcc, 0x4d, 0x4c, 0x4f,
	0x85, 0x99, 0x2b, 0xc2, 0xc5, 0x9a, 0x09, 0xe2, 0x83, 0x95, 0xf3, 0x04, 0x41, 0x38, 0x4a, 0x86,
	0x5c, 0xc2, 0x28, 0x6a, 0x49, 0x31, 0x3e, 0x2c, 0x33, 0x25, 0x35, 0x1f, 0xc9, 0xf8, 0x32, 0x10,
	0x1f, 0x66, 0x3c, 0x98, 0x83, 0x30, 0x1e, 0xaa, 0x96, 0xb0, 0xf1, 0x46, 0xab, 0x19, 0xb9, 0x38,
	0x3c, 0x0b, 0x9c, 0xc1, 0x61, 0x24, 0xa4, 0xc9, 0xc5, 0x06, 0xd1, 0x2f, 0xc4, 0xa7, 0x87, 0x12,
	0x4c, 0x52, 0xfc, 0x7a, 0x68, 0x21, 0x62, 0xc1, 0xc5, 0x8d, 0xe4, 0x13, 0x21, 0x61, 0x3d, 0xcc,
	0x30, 0x90, 0x12, 0xd1, 0xc3, 0xe6, 0x59, 0x2b, 0x98, 0x4e, 0xb0, 0x23, 0xe1, 0x3a, 0x91, 0xbd,
	0x07, 0xd7, 0x89, 0xe2, 0x0f, 0x0d, 0x46, 0x27, 0x69, 0x2e, 0xf1, 0xe4, 0xfc, 0x5c, 0xbd, 0xe2,
	0xe2, 0xd2, 0xa4, 0xd4, 0x94, 0xcc, 0x22, 0xbd, 0xf4, 0xa2, 0x82, 0x64, 0x48, 0xfc, 0x06, 0x30,
	0x26, 0xb1, 0x81, 0xa3, 0xd8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xa8, 0xb6, 0x6f, 0xfa,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IpCameraClient is the client API for IpCamera service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IpCameraClient interface {
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
	StreamImage(ctx context.Context, in *StreamImageRequest, opts ...grpc.CallOption) (*StreamImageResponse, error)
	StreamVideo(ctx context.Context, opts ...grpc.CallOption) (IpCamera_StreamVideoClient, error)
}

type ipCameraClient struct {
	cc *grpc.ClientConn
}

func NewIpCameraClient(cc *grpc.ClientConn) IpCameraClient {
	return &ipCameraClient{cc}
}

func (c *ipCameraClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, "/IpCamera/Stream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipCameraClient) StreamImage(ctx context.Context, in *StreamImageRequest, opts ...grpc.CallOption) (*StreamImageResponse, error) {
	out := new(StreamImageResponse)
	err := c.cc.Invoke(ctx, "/IpCamera/StreamImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipCameraClient) StreamVideo(ctx context.Context, opts ...grpc.CallOption) (IpCamera_StreamVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IpCamera_serviceDesc.Streams[0], "/IpCamera/StreamVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &ipCameraStreamVideoClient{stream}
	return x, nil
}

type IpCamera_StreamVideoClient interface {
	Send(*StreamVideoRequest) error
	CloseAndRecv() (*StreamVideoResponse, error)
	grpc.ClientStream
}

type ipCameraStreamVideoClient struct {
	grpc.ClientStream
}

func (x *ipCameraStreamVideoClient) Send(m *StreamVideoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ipCameraStreamVideoClient) CloseAndRecv() (*StreamVideoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IpCameraServer is the server API for IpCamera service.
type IpCameraServer interface {
	Stream(context.Context, *StreamRequest) (*StreamResponse, error)
	StreamImage(context.Context, *StreamImageRequest) (*StreamImageResponse, error)
	StreamVideo(IpCamera_StreamVideoServer) error
}

// UnimplementedIpCameraServer can be embedded to have forward compatible implementations.
type UnimplementedIpCameraServer struct {
}

func (*UnimplementedIpCameraServer) Stream(ctx context.Context, req *StreamRequest) (*StreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (*UnimplementedIpCameraServer) StreamImage(ctx context.Context, req *StreamImageRequest) (*StreamImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamImage not implemented")
}
func (*UnimplementedIpCameraServer) StreamVideo(srv IpCamera_StreamVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamVideo not implemented")
}

func RegisterIpCameraServer(s *grpc.Server, srv IpCameraServer) {
	s.RegisterService(&_IpCamera_serviceDesc, srv)
}

func _IpCamera_Stream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpCameraServer).Stream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IpCamera/Stream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpCameraServer).Stream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpCamera_StreamImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpCameraServer).StreamImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IpCamera/StreamImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpCameraServer).StreamImage(ctx, req.(*StreamImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpCamera_StreamVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IpCameraServer).StreamVideo(&ipCameraStreamVideoServer{stream})
}

type IpCamera_StreamVideoServer interface {
	SendAndClose(*StreamVideoResponse) error
	Recv() (*StreamVideoRequest, error)
	grpc.ServerStream
}

type ipCameraStreamVideoServer struct {
	grpc.ServerStream
}

func (x *ipCameraStreamVideoServer) SendAndClose(m *StreamVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ipCameraStreamVideoServer) Recv() (*StreamVideoRequest, error) {
	m := new(StreamVideoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IpCamera_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IpCamera",
	HandlerType: (*IpCameraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stream",
			Handler:    _IpCamera_Stream_Handler,
		},
		{
			MethodName: "StreamImage",
			Handler:    _IpCamera_StreamImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamVideo",
			Handler:       _IpCamera_StreamVideo_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/ipcamera.proto",
}
